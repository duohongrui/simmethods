% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01-Splat.R
\name{Splat_simulation}
\alias{Splat_simulation}
\title{Simulate Datasets by Splat}
\usage{
Splat_simulation(
  parameters,
  other_prior = NULL,
  return_format,
  verbose = FALSE,
  seed
)
}
\arguments{
\item{parameters}{A object generated by \code{\link[splatter]{splatEstimate}}}

\item{other_prior}{A list with names of certain parameters. Some methods need
extra parameters to execute the estimation step, so you must input them. In
simulation step, the number of cells, genes, groups, batches, the percent of
DEGs and other variables are usually customed, so before simulating a dataset
you must point it out.}

\item{return_format}{A character. Alternatives choices: list, SingleCellExperiment,
Seurat, h5ad}

\item{verbose}{Logical. Whether to return messages or not.}

\item{seed}{A random seed.}
}
\description{
Simulate Datasets by Splat
}
\examples{
# Load data
ref_data <- simmethods::data
# Estimate parameters
estimate_result <- simmethods::Splat_estimation(ref_data = data,
                                                verbose = T,
                                                seed = 10)

# (1) Simulate 500 cells (Since we can not set nBatches directly, so we can set
# batchCells (a numeric vector)) and 2000 genes
simulate_result <- simmethods::Splat_simulation(parameters = estimate_result[["estimate_result"]],
                                                other_prior = list(batchCells = 500,
                                                                   nGenes = 2000),
                                                return_format = "list",
                                                verbose = T,
                                                seed = 111)
count_data <- simulate_result[["simulate_result"]][["count_data"]]
dim(count_data)


# (2) Simulate one group and one batch
simulate_result <- simmethods::Splat_simulation(parameters = estimate_result[["estimate_result"]],
                                                other_prior = NULL,
                                                return_format = "list",
                                                verbose = T,
                                                seed = 111)
count_data <- simulate_result[["simulate_result"]][["count_data"]]
dim(count_data)


# (3) Simulate two groups (de.prob = 0.1) and one batch
simulate_result <- simmethods::Splat_simulation(parameters = estimate_result[["estimate_result"]],
                                                other_prior = list(prob.group = c(0.4, 0.6)),
                                                return_format = "list",
                                                verbose = T,
                                                seed = 111)
count_data <- simulate_result[["simulate_result"]][["count_data"]]
dim(count_data)
## cell information
col_data <- simulate_result[["simulate_result"]][["col_meta"]]
table(col_data$group)
## gene information
row_data <- simulate_result[["simulate_result"]][["row_meta"]]
### The result of Splat contains the factors of different groups and uses can
### calculate the fold change by division. For example, the DEFactors of A gene
### in Group1 and Group2 are respectively 2 and 1, and the fold change of A gene
### is 2/1=2 or 1/2=0.5.
fc_group1_to_group2 <- row_data$DEFacGroup2/row_data$DEFacGroup1
### I guess that the true DEGs have > 1 fold change
table(fc_group1_to_group2 > 1)[2]/4000 ## de.prob = 0.1
### number of all DEGs
table(row_data$de_gene)


# (4) Simulate two groups (de.prob = 0.2) and two batches
## Since we can not set nBatches directly, so we can set batchCells (a numeric vector)
## to determin the number of batches and cells simutaniously.
simulate_result <- simmethods::Splat_simulation(parameters = estimate_result[["estimate_result"]],
                                                other_prior = list(prob.group = c(0.4, 0.6),
                                                                   batchCells = c(80, 80),
                                                                   de.prob = 0.2),
                                                return_format = "list",
                                                verbose = T,
                                                seed = 111)
count_data <- simulate_result[["simulate_result"]][["count_data"]]
dim(count_data)
col_data <- simulate_result[["simulate_result"]][["col_meta"]]
table(col_data$group)
table(col_data$batch)


# (5) Simulate three groups (de.prob = 0.2) and two batches
## Since we can not set nBatches directly, so we can set batchCells (a numeric vector)
## to determin the number of batches and cells simutaniously.
simulate_result <- simmethods::Splat_simulation(parameters = estimate_result[["estimate_result"]],
                                                other_prior = list(prob.group = c(0.4, 0.3, 0.3),
                                                                   batchCells = c(80, 80),
                                                                   de.prob = 0.2),
                                                return_format = "list",
                                                verbose = T,
                                                seed = 111)
count_data <- simulate_result[["simulate_result"]][["count_data"]]
dim(count_data)
col_data <- simulate_result[["simulate_result"]][["col_meta"]]
table(col_data$group)
table(col_data$batch)
## row data
row_data <- simulate_result[["simulate_result"]][["row_meta"]]
### DEGs
table(row_data$de_gene)
### fold change of Group1 to Group2
fc_group1_to_group2 <- row_data$DEFacGroup2/row_data$DEFacGroup1
table(fc_group1_to_group2 > 1)[2]/4000
### fold change of Group1 to Group3
fc_group1_to_group3 <- row_data$DEFacGroup3/row_data$DEFacGroup1
table(fc_group1_to_group3 > 1)[2]/4000
### fold change of Group2 to Group3
fc_group2_to_group3 <- row_data$DEFacGroup3/row_data$DEFacGroup2
table(fc_group2_to_group3 > 1)[2]/4000
}
\references{
Zappia, L., Phipson, B. & Oshlack, A. Splatter: simulation of single-cell RNA sequencing data. Genome Biol 18, 174 (2017)
}
